version: "3.8"
services:
  redis:
    container_name: redis
    image: redis/redis-stack:latest
    restart: unless-stopped
    ports:
      - 6379:6379
      - 8001:8001
    volumes:
      - redis_volume_data:/data
      - redis_insight_volume_data:/db
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres:
    container_name: postgres
    image: postgres:14.1-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${PG_DATABASE}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - postgres_volume_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    env_file:
      - .env
    networks:
      - postgres

  pgadmin:
    container_name: postgres_pgadmin
    image: dpage/pgadmin4:7.2
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      # - PGADMIN_CONFIG_SERVER_MODE=false
    ports:
      - 8432:80
    volumes:
      - pgadmin_volume_data:/var/lib/pgadmin
    networks:
      - postgres

  microservice:
    container_name: microservice
    env_file:
      - .env
    ports:
      - $PORT:$PORT
    volumes:
      - .:/app/
      - /app/node_modules
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run start
    depends_on:
      - redis
      - postgres
    stdin_open: true
    tty: true

volumes:
  redis_volume_data:
  redis_insight_volume_data:
  postgres_volume_data:
  pgadmin_volume_data:
  redis:
    driver: local
  postgres:
    driver: local

networks:
  postgres:
    driver: bridge
